#Import packages and libraries
import matplotlib.pyplot as plt
import matplotlib.colors
from matplotlib_scalebar.scalebar import ScaleBar
import numpy as np
import tifffile
from tifffile import imsave
import skimage.filters
import skimage.measure
from skimage.filters import threshold_otsu, threshold_local
from skimage.segmentation import clear_border
import scipy
from scipy.stats import norm
import cv2
import spam
import spam.DIC as DIC
import spam.plotting
import spam.label
import time

# Define the path of the time zero image
t0 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/bin2_series/step_00.tif"

#Define the path of the t0 grain mask
t0_mask = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/bin2_label.tif"

# Define the path of the difference images
t1 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-01.tif"
t2 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-02.tif"
t3 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-03.tif"
t4 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-04.tif"
t5 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-05.tif"
t6 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-06.tif"
t7 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-07.tif"
t8 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-08.tif"
t9 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-09.tif"
t10 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-10.tif"
t11 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-11.tif"
t12 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-12.tif"
t13 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-13.tif"
t14 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-14.tif"
t15 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-15.tif"
t16 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-16.tif"
t17 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-17.tif"
t18 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-18.tif"
t19 = "/zhome/b5/6/156017/Desktop/2023_DVC_group/analysis/Aske/Shared/deltas_reg/delta-reg-00-19.tif"

# An array of names and paths are defined
time_step_names = np.array(['t0', 't1', 't2', 't3', 't4', 't5', 't6', 't7', 't8', 't9', 't10', 't11', 't12', 't13', 't14', 't15', 't16', 't17', 't18', 't19'])
time_step_dir = np.array([t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19])

# This function loads a given time step, by using the time step index as input
def load_time_step(time_step_n):
    time_step = tifffile.imread(time_step_dir[time_step_n])
    return time_step

# Here all images are loaded
time_steps = []
for i in range(20):
    time_steps.append(load_time_step(i))

#Define the used binning and the pixel size in Âµm will be computed
binning = 2
pixel_size = binning*1.35


#crop the volume in the top and in the bottom by two slices, and print the new shape of the volume
Z, Y, X = time_steps[0].shape
time_steps_c = []
for i in range(20):
    time_step_c=time_steps[i]
    time_steps_c.append(time_step_c[2:Z-2, 0:Y, 0:X])

Z, Y, X = time_steps_c[0].shape
print(Z)

#load the t0 grain mask, and use the inverse mask to extract intensity value distribution of the pore space in the difference images
hist_mask = tifffile.imread(t0_mask)
hist_mask = hist_mask == 0
results = []
for i in range(1, len(time_steps)):
    results.append(np.extract(hist_mask, time_steps[i]))

# Subtract the distribution of d1 from d19
data = results[18]-results[0]

# Calculate the mean and standard deviation of the resulting distribution
mean = np.mean(data)
std_dev = np.std(data)

# Plot a histogram of the resulting distribution
plt.hist(data, bins=1000, density=True, alpha=0.7, label='Histogram')

# Generate x values for the fitted Gaussian curve
x = np.linspace(np.min(data), np.max(data), 1000)

# Calculate the corresponding y values for the Gaussian curve using mean and standard deviation
y = norm.pdf(x, loc=mean, scale=std_dev)

# Plot the Gaussian curve
plt.plot(x, y, 'r', label='Gaussian Curve')

# Add a vertical line at mean + 2 * standard deviation
line_pos = mean + 2 * std_dev
plt.axvline(line_pos, color='black', linestyle='--', label='Threshold')

# Set labels and title with modified font size
plt.xlabel('Voxel value', fontsize=14)
plt.ylabel('Frequency / Probability Density', fontsize=14)
plt.title('d19 histogram with fitted Gaussian Curve', fontsize=16, fontweight='bold')

# Set legend font size
plt.legend(fontsize=12)

# Display the plot
plt.show()














#set the threshold value that segments the nanoparticles
threshold = std*2+mean

#create the binary images of nanoparticles
binary_time_steps = []
for i in range(len(time_steps_c)):
    binary_time_steps.append(time_steps_c[i] > threshold)
